require("dotenv").config();const{SESSION_ID:SESSION_ID}=process.env,{waitFor:waitFor}=require("../common/common.util"),generateGroupId=()=>(new Date).getTime().toString(36)+Math.random().toString(36).slice(2),onGroupCreatedHandler=async(e,o)=>{const{signalRClient:r,serverHub:n}=require("../signalr/signalr.util"),t=JSON.parse(e);console.log(`msgArgs: ${JSON.stringify(t)}`);const{sessionId:s,newGroup:a}=t;if(s!==SESSION_ID)return;const{name:i,greeting_message:d,members:c}=a;let l=generateGroupId(),u="true";try{let e=[];for(const o of c)e.push(o.id);l=(await o.groupCreate(i,e)).id;try{await waitFor(2e3)}catch(e){console.log(`error: ${e}`)}await o.sendMessage(l,{text:d})}catch(e){u="false",console.log(`onGroupCreatedHandler::ex: ${e}`)}r.connection.hub.invoke(n,"CreatedGroupStatus",JSON.stringify({groupStatus:{status:u,name:i,id:l},sessionId:SESSION_ID}))},onAddRemoveGroupMemberHandler=async(e,o)=>{const r=JSON.parse(e);console.log(`msgArgs: ${JSON.stringify(r)}`);const{sessionId:n,group:t,action:s}=r;if(n!==SESSION_ID)return;const{id:a,members:i}=t;let d=[];for(const e of i)d.push(e.id);try{const e=await o.groupParticipantsUpdate(a,d,s);console.log(`result: ${JSON.stringify(e)}`)}catch(e){console.log(`onAddRemoveGroupMemberHandler::ex: ${e}`)}};module.exports={onGroupCreatedHandler:onGroupCreatedHandler,onAddRemoveGroupMemberHandler:onAddRemoveGroupMemberHandler};