const{executeNonQuery:executeNonQuery,executeReader:executeReader}=require("../db/db.util"),{validateJid:validateJid}=require("../common/common.util"),getMessageByJid=async e=>{try{const s="SELECT CAST(message AS CHAR) AS message\n                     FROM messages \n                     WHERE jid = ? AND messages.message LIKE '%\"fromMe\":false%' AND messages.message LIKE '%\"message\":%'\n                     ORDER BY id DESC\n                     LIMIT 1";return(await executeReader(s,[validateJid(e)]))[0].message}catch(e){console.log(`getMessageByJid::ex: ${e}`)}},getMessageForDeleteInGroupByJid=async e=>{try{const s="SELECT CAST(message AS CHAR) AS message\n                     FROM messages \n                     WHERE jid = ? AND messages.message LIKE '%\"fromMe\":false%' AND messages.message LIKE '%\"message\":%'\n                     AND messages.message LIKE '%\"participant\":%'\n                     ORDER BY id DESC\n                     LIMIT 1",a=await executeReader(s,[validateJid(e)]);if(a)return a[0].message}catch(e){console.log(`getMessageForDeleteInGroupByJid::ex: ${e}`)}},getMessageForDeleteByJid=async e=>{try{const s="SELECT CAST(message AS CHAR) AS message\n                     FROM messages \n                     WHERE jid = ? AND messages.message LIKE '%\"message\":%'\n                     ORDER BY id DESC\n                     LIMIT 1";return(await executeReader(s,[validateJid(e)]))[0].message}catch(e){console.log(`getMessageByJid::ex: ${e}`)}},getLastMessages=async()=>{try{const e="SELECT messages.jid, CAST(messages.message AS CHAR) AS message \n                     FROM messages INNER JOIN (\n                        SELECT jid, MAX(id) AS id FROM messages\n                        WHERE message LIKE '%\"fromMe\":false%' AND message LIKE '%\"message\":%'\n                        GROUP BY jid\n                     ) AS last_message ON last_message.id = messages.id\n                     WHERE messages.message LIKE '%\"fromMe\":false%' AND messages.message LIKE '%\"message\":%'";return await executeReader(e)}catch(e){console.log(`getLastMessages::ex: ${e}`)}},addMessage=async e=>{try{const s=[validateJid(e.key.remoteJid),e.key.id,JSON.stringify(e)],a="INSERT INTO messages (jid, messageId, message)\n                     VALUES (?, ?, ?)";await executeNonQuery(a,s)}catch(e){console.log(`addMessage::ex: ${e}`)}},updateMessage=async e=>{try{const s=e.key.id,a=[e.update.status,s],t="UPDATE messages SET status = ? WHERE messageId = ?";await executeNonQuery(t,a)}catch(e){console.log(`updateMessage::ex: ${e}`)}},existMessage=async e=>{try{const s="SELECT COUNT(*) as count\n                     FROM messages\n                     WHERE messageId = ?";return(await executeReader(s,[e]))[0].count>0}catch(e){console.log(`existMessage::ex: ${e}`)}return!1},getMessageById=async e=>{try{const s="SELECT CAST(message AS CHAR) AS message\n                     FROM messages \n                     WHERE messageId = ?\n                     ORDER BY id LIMIT 1";return(await executeReader(s,[e]))[0].message}catch(e){console.log(`getMessageById::ex: ${e}`)}},getAllMessageByContactId=async(e,s)=>{try{s||(s=100);const a=`SELECT cast(message AS CHAR) AS message\n                     FROM messages \n                     WHERE jid = ? AND message LIKE '%"message":%'\n                     ORDER BY id DESC\n                     LIMIT ${s}`;return await executeReader(a,[validateJid(e)])}catch(e){console.log(`getAllMessageByContactId::ex: ${e}`)}},getUnreadMessage=async e=>{try{e||(e=100);const s=`SELECT cast(message AS CHAR) AS message\n                     FROM messages \n                     WHERE message LIKE '%"fromMe":true%' AND message LIKE '%"message":%' AND status = 2\n                     ORDER BY id DESC\n                     LIMIT ${e}`;return await executeReader(s,null)}catch(e){console.log(`getUnreadMessage::ex: ${e}`)}};module.exports={addMessage:addMessage,updateMessage:updateMessage,existMessage:existMessage,getMessageById:getMessageById,getMessageForDeleteInGroupByJid:getMessageForDeleteInGroupByJid,getMessageForDeleteByJid:getMessageForDeleteByJid,getLastMessages:getLastMessages,getAllMessageByContactId:getAllMessageByContactId,getUnreadMessage:getUnreadMessage,getMessageByJid:getMessageByJid};