const{executeNonQuery:executeNonQuery,executeReader:executeReader}=require("../db/db.util"),{validateJid:validateJid}=require("../common/common.util"),getContactById=async e=>{try{if(!e)return;e=validateJid(e);const t="SELECT id, cast(name AS CHAR) AS name, CAST(pushName AS CHAR) AS pushname, verifiedname \n                     FROM contacts \n                     WHERE id = ?",a=await executeReader(t,[e]);if(a)return a[0]}catch(e){console.log(`getContactById::ex: ${e}`)}},getContacts=async()=>{try{const e="SELECT id, cast(name AS CHAR) AS name, CAST(pushname AS CHAR) AS pushname, verifiedname \n                     FROM contacts \n                     WHERE isgroup = 0\n                     ORDER BY name";return await executeReader(e)}catch(e){console.log(`getContacts::ex: ${e}`)}},existContact=async e=>{try{if(!e)return!1;e=validateJid(e);const t="SELECT COUNT(*) as count\n                     FROM contacts\n                     WHERE id = ?";return(await executeReader(t,[e]))[0].count>0}catch(e){console.log(`existContact::ex: ${e}`)}return!1},addEditContact=async e=>{try{let t=void 0;if(!e)return;const a=validateJid(e.id);let n=await existContact(a);if(n){const n=[e.name,e.pushname,e.verifiedname,a];t="UPDATE contacts SET name = ?, pushname = ?, verifiedname = ?\n                   WHERE id = ?";await executeNonQuery(t,n)}else{const c=[a,e.name,e.pushname,e.verifiedname,e.isgroup];if(console.log(`contact: ${JSON.stringify(e)}`),!(n=await existContact(a))){t="INSERT INTO contacts (id, name, pushname, verifiedname, isgroup)\n                       VALUES (?, ?, ?, ?, ?)";await executeNonQuery(t,c)}}}catch(t){console.log(`contacts: ${JSON.stringify(e)}`),console.log(`addEditContact::ex: ${t}`)}};module.exports={addEditContact:addEditContact,existContact:existContact,getContactById:getContactById,getContacts:getContacts};