require("dotenv").config();const{SESSION_ID:SESSION_ID}=process.env,{addMessage:addMessage,updateMessage:updateMessage,existMessage:existMessage,getMessageById:getMessageById}=require("../db.repository/messages.repository"),{findVal:findVal}=require("../common/common.util"),{LegacyMessageTypes:LegacyMessageTypes,getLegacyMessageType:getLegacyMessageType}=require("../common/message.type"),{signalRClient:signalRClient,serverHub:serverHub}=require("../signalr/signalr.util"),messagesUpdate=async(e,s)=>{for(const a of e){if(a.key&&"status@broadcast"==a.key.remoteJid)continue;const e=a.key.id,t=a.key.fromMe;let i=-1;if(a.update.status)switch(a.update.status){case 0:i=-1;break;case 1:i=0;break;case 2:i=1;break;case 3:i=2;break;case 4:i=3;break;case 5:i=4}let g=void 0;try{const s=await getMessageById(e);g=JSON.parse(s)}catch(e){console.log(`getMessageById::ex: ${e}`)}if(g){const a=g.key.remoteJid;let n=findVal(g,"conversation");if(!n){const e=findVal(g,"extendedTextMessage");e&&(n=e.text)}const o=getLegacyMessageType(g),c=findVal(g,"messageTimestamp");let r=s,d=a;t||(r=a,d=s);const y={id:e,sessionId:SESSION_ID,ack:i,content:n||"",type:o||"",from:r||"",to:d||"",unixTimestamp:c||0};if(y.type===LegacyMessageTypes.CONTACT_MESSAGE||y.type===LegacyMessageTypes.CONTACTS_ARRAY_MESSAGE||y.type===LegacyMessageTypes.LOCATION_MESSAGE){findVal(g,"quotedMessage")||(y.content="")}signalRClient.connection.hub.invoke(serverHub,"MessageAck",JSON.stringify({message:JSON.stringify(y),sessionId:SESSION_ID}))}await existMessage(e)?(a.update.status=i,await updateMessage(a)):await addMessage(a)}};module.exports=messagesUpdate;